/**
 * 
 */
package com.crawljax.web.jatyta.model.dao;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;

import com.crawljax.web.jatyta.model.entities.JatytaFormValueRecord;
import com.crawljax.web.jatyta.plugins.util.form.FormValuesInfoDetail;
import com.crawljax.web.jatyta.plugins.util.jsf.JSFUtils;
import com.crawljax.web.model.Configuration;
import com.crawljax.web.model.CrawlRecord;

/**
 * @author mgimenez
 * 
 */
public class JatytaFormValueRecordDAO extends
		DAOImpl<JatytaFormValueRecord, Long> {

	public JatytaFormValueRecordDAO(Session session) {
		super(session);

	}

	/**
	 * Generates a {@link JatytaFormValueRecord} from the {@link CrawlRecord}
	 * parameter.
	 * 
	 * @param idCrawlRecord
	 *            The id of {@link CrawlRecord} instance asociated.
	 * @param formFieldXPath
	 *            The xpath to identify the form field.
	 * @param detail
	 *            The {@link FormValuesInfoDetail} to generate the
	 *            {@link JatytaFormValueRecord}.
	 * @return The {@link JatytaFormValueRecord}.
	 */
	public static JatytaFormValueRecord mapping(int idCrawlRecord,
			String formFieldXPath, FormValuesInfoDetail detail) {

		JatytaFormValueRecord record = new JatytaFormValueRecord();
		record.setFormFieldXPath(formFieldXPath);
		record.setStateAsociated(detail.getStateAsociated());
		record.setType(detail.getType().getValue());
		record.setValue(detail.getValue().toString());
		record.setIdCrawlRecord(idCrawlRecord);
		record.setValueOrder(detail.getValueOrder());
		return record;

	}

	/**
	 * Return a list of {@link JatytaFormValueRecord} with the group by of
	 * formFieldXPath and value attributes asociated with the idCrawlRecord
	 * parameter.
	 * 
	 * @param idCrawlRecord
	 *            The id of crawl record.
	 * @return The {@link List} of {@link JatytaFormValueRecord}
	 */
	public List<JatytaFormValueRecord> getFormValuesRecordGroupBy(
			Long idCrawlRecord) {
		List<JatytaFormValueRecord> result = new ArrayList<JatytaFormValueRecord>();

		session.beginTransaction();

		String hql = "select distinct f.formFieldXPath, f.value, f.type "
				+ " from JatytaFormValueRecord f where f.idCrawlRecord = "
				+ idCrawlRecord + " ";

		Query query = session.createQuery(hql);

		List<Object[]> valueRegArrayList = query.list();

		session.getTransaction().commit();

		// Por cada elemento, se crea un formvaluerecord

		for (Object[] objects : valueRegArrayList) {
			JatytaFormValueRecord record = new JatytaFormValueRecord();
			record.setFormFieldXPath((String) objects[0]);
			record.setValue((String) objects[1]);
			record.setType((String) objects[2]);
			result.add(record);
		}

		return result;
	}

	/**
	 * Removes the JSF parent id from xpath expression.
	 * 
	 * @param values
	 *            The {@link List} of {@link JatytaFormValueRecord} to ajust the
	 *            id from xpath Expression.
	 */
	public static void ajustFormValuesNameForJSF(
			List<JatytaFormValueRecord> values) {
		for (JatytaFormValueRecord jatytaFormValueRecord : values) {
			String id = jatytaFormValueRecord.getIdFromXPathExpresion();
			String new_id = JSFUtils.removeAutoGeneratedParentIdOrName(id);
			String xpathExp = jatytaFormValueRecord.getFormFieldXPath()
					.replaceAll(id, new_id);
			jatytaFormValueRecord.setFormFieldXPath(xpathExp);
		}
	}

	/**
	 * 
	 * Return the estimated time to crawl under the {@link Configuration} and
	 * maximum form values parameters.
	 * 
	 * @param configuration
	 *            The {@link Configuration} to obtain the number of states and
	 *            wait event fired time.
	 * @param maxValues
	 *            The maximum number of values per form field.
	 * @return A {@link BigDecimal} with the estimated time in milliseconds.
	 */
	public BigDecimal calculateTimeEstimatedForCrawl(
			Configuration configuration, Integer maxValues) {

		BigDecimal resultInMilliSeg = BigDecimal.ZERO;

		session.beginTransaction();

		String hql = "select count(distinct f.stateAsociated)  "
				+ " from JatytaFormValueRecord f where f.idCrawlRecord in ("
				+ " select r.idCrawlRecord from JatytaCrawlRecord r "
				+ " where r.configurationId =:configId ) ";

		Query query = session.createQuery(hql);
		query.setString("configId", configuration.getId());

		// count of form states
		Long countFormStates = (Long) query.uniqueResult();

		hql = " select max(statesNumber) from JatytaCrawlRecord "
				+ " where configurationId =:configId";
		query = session.createQuery(hql);
		query.setString("configId", configuration.getId());

		// get the max number of states for configurationId
		Integer maxStates = (Integer) query.uniqueResult();

		// Difference between max states and form states
		if(maxStates!=null && countFormStates!=null){
			Long numberStatesFormLess = maxStates - countFormStates;
			// TODO ver otra forma de calcular el tiempo estimado.
			Long timeStateFormless = numberStatesFormLess
					* (configuration.getEventWaitTime() + configuration
							.getReloadWaitTime());
			Long timeFormStates = countFormStates
					* (configuration.getEventWaitTime() + configuration
							.getReloadWaitTime());
			timeFormStates = timeFormStates * maxValues;
			Long openBrowserWaitTime = new Long(15000);
			resultInMilliSeg = new BigDecimal(timeFormStates + timeStateFormless
					+ openBrowserWaitTime);
		}
		
		session.getTransaction().commit();


		return resultInMilliSeg;
	}
}
